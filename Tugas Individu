#include <iostream>
#include <vector>
#include <algorithm>
#include <chrono>
#include <iomanip> 

using namespace std;
using namespace std::chrono;

// Bubble Sort
void bubbleSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n-1; i++)
        for (int j = 0; j < n-i-1; j++)
            if (arr[j] > arr[j+1])
                swap(arr[j], arr[j+1]);
}

// Insertion Sort
void insertionSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

// Selection Sort
void selectionSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n-1; i++) {
        int min_idx = i;
        for (int j = i+1; j < n; j++)
            if (arr[j] < arr[min_idx])
                min_idx = j;
        swap(arr[min_idx], arr[i]);
    }
}

// Merge Sort
void merge(vector<int>& arr, int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;
    vector<int> L(n1), R(n2);
    for (int i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];
    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j])
            arr[k++] = L[i++];
        else
            arr[k++] = R[j++];
    }
    while (i < n1)
        arr[k++] = L[i++];
    while (j < n2)
        arr[k++] = R[j++];
}

void mergeSort(vector<int>& arr, int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

void mergeSortWrapper(vector<int>& arr) {
    mergeSort(arr, 0, arr.size() - 1);
}

// Quick Sort
int partition(vector<int>& arr, int low, int high) {
    int pivot = arr[high];
    int i = (low - 1);
    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return (i + 1);
}

void quickSort(vector<int>& arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

void quickSortWrapper(vector<int>& arr) {
    quickSort(arr, 0, arr.size() - 1);
}

vector<int> generateRandomVector(int size) {
    vector<int> vec(size);
    generate(vec.begin(), vec.end(), rand);
    return vec;
}

vector<int> generateReverseSortedVector(int size) {
    vector<int> vec(size);
    generate(vec.begin(), vec.end(), rand);
    sort(vec.begin(), vec.end(), greater<int>());
    return vec;
}

vector<int> generateSortedVector(int size) {
    vector<int> vec(size);
    generate(vec.begin(), vec.end(), rand);
    sort(vec.begin(), vec.end());
    return vec;
}


template <typename T>
double measureSortTime(T sortFunc, vector<int> arr) {
    auto start = high_resolution_clock::now();
    sortFunc(arr);
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
    return duration.count();
}

int main() {
    vector<int> sizes = {10, 100, 500, 1000, 10000};
    
    cout << "Tabel Running Time\n";
    cout << "Algorithm\tKompleksitas Waktu - fungsi O(n)\tN=10(µs)\tN=100(µs)\tN=500(µs)\tN=1000(µs)\tN=10000(µs)\n";
    

    vector<void(*)(vector<int>&)> sortFunctions = {bubbleSort, insertionSort, selectionSort, mergeSortWrapper, quickSortWrapper};
    vector<string> sortNames = {"Bubble Sort", "Insertion Sort", "Selection Sort", "Merge Sort", "Quick Sort"};
    vector<string> complexities = {"O(n^2)", "O(n^2)", "O(n^2)", "O(n log n)", "O(n log n)"};
    vector<string> conditions = {"Random", "Reversed", "Sorted"};
    
    for (int i = 0; i < sortFunctions.size(); i++) {
        for (const auto& condition : conditions) {
            cout << sortNames[i] << "\t" << complexities[i] << "\t" << condition;
            for (int size : sizes) {
                vector<int> data;
                if (condition == "Random") {
                    data = generateRandomVector(size);
                } else if (condition == "Reversed") {
                    data = generateReverseSortedVector(size);
                } else if (condition == "Sorted") {
                    data = generateSortedVector(size);
                }
                double time = measureSortTime(sortFunctions[i], data);
                cout << "\t" << fixed << setprecision(2) << time;
            }
            cout << "\n";
        }
    }

    return 0;
}
